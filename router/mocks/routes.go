// Code generated by MockGen. DO NOT EDIT.
// Source: router/routes.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// ReadConcurrentPokemon mocks base method.
func (m *MockController) ReadConcurrentPokemon(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadConcurrentPokemon", w, r)
}

// ReadConcurrentPokemon indicates an expected call of ReadConcurrentPokemon.
func (mr *MockControllerMockRecorder) ReadConcurrentPokemon(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConcurrentPokemon", reflect.TypeOf((*MockController)(nil).ReadConcurrentPokemon), w, r)
}

// ReadPokemon mocks base method.
func (m *MockController) ReadPokemon(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadPokemon", w, r)
}

// ReadPokemon indicates an expected call of ReadPokemon.
func (mr *MockControllerMockRecorder) ReadPokemon(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPokemon", reflect.TypeOf((*MockController)(nil).ReadPokemon), w, r)
}

// SavePokemon mocks base method.
func (m *MockController) SavePokemon(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SavePokemon", w, r)
}

// SavePokemon indicates an expected call of SavePokemon.
func (mr *MockControllerMockRecorder) SavePokemon(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePokemon", reflect.TypeOf((*MockController)(nil).SavePokemon), w, r)
}
